{"version":3,"sources":["keyword.js"],"names":["mongoose","Query","Schema","getKeywordRegex","term","matches","pattern","match","forEach","t","replace","prototype","keyword","options","filters","fields","find","or","query","re","length","RegExp","field","model","schema","path","Types","Array","$in","push"],"mappings":";;;;;;;eAAe,kBAACA,QAAD,EAAc;AAC5B,MACCC,KAAK,GAAGD,QAAQ,CAACC,KADlB;AAAA,MAECC,MAAM,GAAGF,QAAQ,CAACE,MAFnB;;AAIA,WAASC,eAAT,CAA0BC,IAA1B,EAAgC;AAC/B,QACCC,OAAO,GAAG,EADX;AAAA,QAECC,OAAO,GAAG,EAFX,CAD+B,CAK/B;;AACAD,IAAAA,OAAO,GAAGD,IAAI,CAACG,KAAL,CAAW,cAAX,CAAV,CAN+B,CAQ/B;;AACA,QAAIF,OAAJ,EAAa;AACZA,MAAAA,OAAO,CAACG,OAAR,CAAgB,UAACC,CAAD,EAAO;AACtB;AACAA,QAAAA,CAAC,GAAGA,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,EAAjB,CAAJ,CAFsB,CAItB;;AACAD,QAAAA,CAAC,GAAGA,CAAC,CAACC,OAAF,CAAU,QAAV,EAAoB,MAApB,CAAJ,CALsB,CAOtB;;AACAD,QAAAA,CAAC,GAAGA,CAAC,CAACC,OAAF,CAAU,GAAV,EAAe,KAAf,CAAJ;AAEAJ,QAAAA,OAAO,IAAI,UAAUG,CAAV,GAAc,GAAzB;AACA,OAXD;AAYA;;AAED,WAAOH,OAAP;AACA;;AAGDL,EAAAA,KAAK,CAACU,SAAN,CAAgBC,OAAhB,GAA0B,UAAUC,OAAV,EAAmB;AAC5C;AACA,QAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,OAArB,IAAgC,CAACD,OAAO,CAACC,OAAR,CAAgBF,OAArD,EAA8D;AAC7D,aAAO,IAAP;AACA;;AAED,QACCG,MAAM,GAAGF,OAAO,CAACC,OAAR,CAAgBF,OAAhB,CAAwBG,MAAxB,IAAkC,EAD5C;AAAA,QAECC,IAAI,GAAG,IAFR;AAAA,QAGCC,EAAE,GAAG,EAHN;AAAA,QAICC,KAAK,GAAG,IAJT;AAAA,QAKCC,EAAE,GAAG,IALN;AAAA,QAMCf,IAAI,GAAGS,OAAO,CAACC,OAAR,CAAgBF,OAAhB,CAAwBR,IAAxB,IAAgC,EANxC;;AAQA,QAAI,CAACW,MAAM,CAACK,MAAR,IAAkBhB,IAAI,KAAK,EAA/B,EAAmC;AAClC,aAAOc,KAAP;AACA;;AAEDC,IAAAA,EAAE,GAAG,IAAIE,MAAJ,CAAWlB,eAAe,CAACC,IAAD,CAA1B,EAAkC,GAAlC,CAAL;AACAW,IAAAA,MAAM,CAACP,OAAP,CAAe,UAACc,KAAD,EAAW;AACzB;AACA,UAAIJ,KAAK,CAACK,KAAN,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwBH,KAAxB,KAAkCJ,KAAK,CAACK,KAAN,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwBH,KAAxB,aAA0CpB,MAAM,CAACwB,KAAP,CAAaC,KAA7F,EAAoG;AACnGX,QAAAA,IAAI,GAAG,EAAP;AACAA,QAAAA,IAAI,CAACM,KAAD,CAAJ,GAAc,EAAd;AACAN,QAAAA,IAAI,CAACM,KAAD,CAAJ,CAAYM,GAAZ,GAAkB,CAACT,EAAD,CAAlB;AACAF,QAAAA,EAAE,CAACY,IAAH,CAAQb,IAAR;AACA,OALD,MAKO;AACNA,QAAAA,IAAI,GAAG,EAAP;AACAA,QAAAA,IAAI,CAACM,KAAD,CAAJ,GAAcH,EAAd;AACAF,QAAAA,EAAE,CAACY,IAAH,CAAQb,IAAR;AACA;AACD,KAZD;AAcAE,IAAAA,KAAK,CAACD,EAAN,CAASA,EAAT;AAEA,WAAOC,KAAP;AACA,GApCD;AAqCA,C","sourcesContent":["export default (mongoose) => {\n\tconst\n\t\tQuery = mongoose.Query,\n\t\tSchema = mongoose.Schema;\n\n\tfunction getKeywordRegex (term) {\n\t\tlet\n\t\t\tmatches = [],\n\t\t\tpattern = '';\n\n\t\t// this splits the string at each space except those within double quotes\n\t\tmatches = term.match(/\\w+|\"[^\"]+\"/g);\n\n\t\t// fix for #33 - empty keywords cause exception\n\t\tif (matches) {\n\t\t\tmatches.forEach((t) => {\n\t\t\t\t// remove quotes\n\t\t\t\tt = t.replace(/\\\"/g, '');\n\n\t\t\t\t// sanitize for regex (strips everything except letters, numbers, underscores, single quotes and whitespace)\n\t\t\t\tt = t.replace(/\\W\\s/ig, '\\\\$&');\n\n\t\t\t\t// replace spaces with escapes\n\t\t\t\tt = t.replace(' ', '\\\\s');\n\n\t\t\t\tpattern += '(?=.*' + t + ')';\n\t\t\t});\n\t\t}\n\n\t\treturn pattern;\n\t}\n\n\n\tQuery.prototype.keyword = function (options) {\n\t\t// ensure keyword exists in query\n\t\tif (!options || !options.filters || !options.filters.keyword) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet\n\t\t\tfields = options.filters.keyword.fields || [],\n\t\t\tfind = null,\n\t\t\tor = [],\n\t\t\tquery = this,\n\t\t\tre = null,\n\t\t\tterm = options.filters.keyword.term || '';\n\n\t\tif (!fields.length || term === '') {\n\t\t\treturn query;\n\t\t}\n\n\t\tre = new RegExp(getKeywordRegex(term), 'i');\n\t\tfields.forEach((field) => {\n\t\t\t// field is an Array; use $in to incorperate keyword for search\n\t\t\tif (query.model.schema.path(field) && query.model.schema.path(field) instanceof Schema.Types.Array) {\n\t\t\t\tfind = {};\n\t\t\t\tfind[field] = {};\n\t\t\t\tfind[field].$in = [re];\n\t\t\t\tor.push(find);\n\t\t\t} else {\n\t\t\t\tfind = {};\n\t\t\t\tfind[field] = re;\n\t\t\t\tor.push(find);\n\t\t\t}\n\t\t});\n\n\t\tquery.or(or);\n\n\t\treturn query;\n\t};\n};\n"],"file":"keyword.js"}