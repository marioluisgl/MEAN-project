{"version":3,"sources":["order.js"],"names":["mongoose","Query","prototype","order","options","sort","fields","query","value","split","map","field","trim","length","forEach","property","isNaN","push","startsWith","substring"],"mappings":";;;;;;;;;;;;;;;;;eAAe,kBAACA,QAAD,EAAc;AAC5BA,EAAAA,QAAQ,CAACC,KAAT,CAAeC,SAAf,CAAyBC,KAAzB,GAAiC,UAAUC,OAAV,EAAmB;AACnD,QAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,IAAzB,EAA+B;AAC9B,aAAO,IAAP;AACA;;AAED,QACCC,MAAM,GAAG,EADV;AAAA,QAECC,KAAK,GAAG,IAFT;AAAA,QAGCF,IAAI,GAAGD,OAAO,CAACC,IAAR,IAAgB,EAHxB;AAAA,QAICG,KAAK,GAAG,IAJT;;AAMA,QAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC7BC,MAAAA,MAAM,GAAGD,IAAI,CACXI,KADO,CACD,KADC,EAEPC,GAFO,CAEH,UAACC,KAAD;AAAA,eAAWA,KAAK,CAACC,IAAN,EAAX;AAAA,OAFG,CAAT;AAGA,KAJD,MAIO,IAAI,sBAAcP,IAAd,KAAuBA,IAAI,CAACQ,MAAhC,EAAwC;AAC9CP,MAAAA,MAAM,GAAGD,IAAT;AACA,KAFM,MAEA,IAAI,sBAAOA,IAAP,MAAgB,QAApB,EAA8B;AACpC,yBAAYA,IAAZ,EAAkBS,OAAlB,CAA0B,UAACC,QAAD,EAAc;AACvC,YAAI,CAACC,KAAK,CAACX,IAAI,CAACU,QAAD,CAAL,CAAV,EAA4B;AAC3B,cAAI,wBAASV,IAAI,CAACU,QAAD,CAAb,EAAyB,EAAzB,IAA+B,CAAnC,EAAsC;AACrCT,YAAAA,MAAM,CAACW,IAAP,CAAY,MAAMF,QAAlB;AACA,WAFD,MAEO;AACNT,YAAAA,MAAM,CAACW,IAAP,CAAYF,QAAZ;AACA;AACD,SAND,MAMO;AACN;AACAT,UAAAA,MAAM,CAACW,IAAP,CAAYF,QAAZ;AACA;AACD,OAXD;AAYA;;AAEDT,IAAAA,MAAM,CAACQ,OAAP,CAAe,UAACH,KAAD,EAAW;AACzBH,MAAAA,KAAK,GAAG,EAAR;;AACA,UAAIG,KAAK,CAACO,UAAN,CAAiB,GAAjB,CAAJ,EAA2B;AAC1BV,QAAAA,KAAK,CAACG,KAAK,CAACQ,SAAN,CAAgB,CAAhB,CAAD,CAAL,GAA4B,CAAC,CAA7B;AACA,OAFD,MAEO;AACNX,QAAAA,KAAK,CAACG,KAAD,CAAL,GAAe,CAAf;AACA;;AAEDJ,MAAAA,KAAK,CAACF,IAAN,CAAWG,KAAX;AACA,KATD;AAWA,WAAOD,KAAP;AACA,GA5CD;AA6CA,C","sourcesContent":["export default (mongoose) => {\n\tmongoose.Query.prototype.order = function (options) {\n\t\tif (!options || !options.sort) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet\n\t\t\tfields = [],\n\t\t\tquery = this,\n\t\t\tsort = options.sort || {},\n\t\t\tvalue = null;\n\n\t\tif (typeof sort === 'string') {\n\t\t\tfields = sort\n\t\t\t\t.split(/\\,/g)\n\t\t\t\t.map((field) => field.trim());\n\t\t} else if (Array.isArray(sort) && sort.length) {\n\t\t\tfields = sort;\n\t\t} else if (typeof sort === 'object') {\n\t\t\tObject.keys(sort).forEach((property) => {\n\t\t\t\tif (!isNaN(sort[property])) {\n\t\t\t\t\tif (parseInt(sort[property], 10) < 0) {\n\t\t\t\t\t\tfields.push('-' + property);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfields.push(property);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// property supplied is NaN; default to 1/ascending\n\t\t\t\t\tfields.push(property);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfields.forEach((field) => {\n\t\t\tvalue = {};\n\t\t\tif (field.startsWith('-')) {\n\t\t\t\tvalue[field.substring(1)] = -1;\n\t\t\t} else {\n\t\t\t\tvalue[field] = 1;\n\t\t\t}\n\n\t\t\tquery.sort(value);\n\t\t});\n\n\t\treturn query;\n\t};\n};\n"],"file":"order.js"}